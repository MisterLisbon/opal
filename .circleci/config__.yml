version: 2.1
executors:
  current_ruby:
    docker:
      - image: circleci/ruby:2.6-stretch
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/rb-deps
          NODE_VERSION: v12.6
  previous_ruby:
    docker:
      - image: circleci/ruby:2.6-stretch
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/rb-deps
          NODE_VERSION: v12.6

commands:
  rb-deps:
    description: 'Install and cache Ruby dependencies'
    steps:
      - run: bundle -v || gem install bundler
      - restore_cache:
          keys:
            - rb-deps-v1-{{ checksum "Gemfile.lock" }}
            - rb-deps-v1-
      - run: bundle check || bundle install
      - save_cache:
          key: rb-deps-v1-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
  js-deps:
    description: 'Install and cache JavaScript dependencies'
    steps:
      - restore_cache:
          keys:
            - js-deps-v1-{{ checksum "yarn.lock" }}
            - js-deps-v1-
      - restore_cache:
          keys:
            - opal_rails-cache-{{ .Branch }}
            - opal_rails-cache-master
      - run:
          name: Install nvm
          command: |
            set +e
            touch $BASH_ENV
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
      - run:
          name: Install node version
          command: |
            nvm install v$NODE_VERSION
            echo 'nvm alias default v$NODE_VERSION' >> $BASH_ENV
      - run:
          name: Yarn Install
          command: |
            npm install -g yarn
            yarn install --cache-folder ~/.cache/yarn
      - save_cache:
          key: opal_rails-cache-{{ .Branch }}
          paths:
            - tmp/cache
      - save_cache:
          key: js-deps-v1-{{ checksum "yarn.lock" }}
          paths:
            - .cache/yarn
  prepare_db:
    description: 'Setup database'
    steps:
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: App configuration
          command: cp config/application.yml{.sample,}
      - run:
          name: Database setup
          command: |
            bin/rails db:create --trace
            bin/rails db:schema:load --trace
  compile_assets:
    steps:
      - restore_cache:
          keys:
            - asset-cache-{{ .Branch }}
            - asset-cache-master
            - asset-cache-
      - run:
          name: Compile assets
          command: bundle exec rails assets:precompile
      - save_cache:
          key: asset-cache-{{ .Branch }}-{{ epoch }}
          paths:
            - public/assets
            - tmp/cache/assets/sprockets
jobs:
  rspec:
    executor: opal_executor
    parallelism: 16
    steps:
      - checkout
      - rb-deps
      - js-deps
      - prepare_db
      - run:
          name: Run rspec in parallel
          command: |
            export TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"
            export RAND_SEED=`ruby -e"print rand(0xFFFF)"`
            echo bin/rspec --seed $RAND_SEED $TEST_FILES
            mkdir /tmp/test-results
            bundle exec rspec --seed $RAND_SEED \
                              --format progress \
                              --format LookOut::RSpec::LookOutFormatter \
                              --format RspecJunitFormatter --out test_results/rspec.xml \
                              $TEST_FILES
      - store_test_results:
          path: test_results

  jest:
    executor: opal_executor
    steps:
      - checkout
      - js-deps
      - run:
          name: Run tests with JUnit as reporter
          command: yarn run jest --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT: "reports/junit/js-test-results.xml"

  cypress:
    executor: opal_executor
    parallelism: 4
    resource_class: medium+
    steps:
      - checkout
      - rb-deps
      - yarn
      - prepare_db
      - compile_assets
      - run:
          name: Install cypress OSS dependencies
          command: sudo apt-get install xvfb libgtk2.0-0 libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2
      - run: mkdir -p tmp/pids && rm -f tmp/pids/*

      - run:
          name: Run rails server in background
          command: bundle exec rails server -e test -p 5002
          background: true
      - run:
          name: Wait for server
          command: |
            until $(curl --retry 10 --output /dev/null --silent --head --fail http://127.0.0.1:5002/admin); do
                printf '.'
                sleep 5
            done
      - run:
          name: Executes Cypress end-to-end tests
          command: |
            export TEST_FILES="$(circleci tests glob "spec/cypress/**/*.spec.js" | circleci tests split --split-by=timings)"
            export TEST_FILES="$(ruby -rshellwords -e'print ENV["TEST_FILES"].shellsplit.join(",")')"
            echo yarn run cypress run --project ./spec --spec $TEST_FILES
            yarn run cypress run --project ./spec --spec $TEST_FILES

      - store_artifacts:
          path: spec/cypress/videos
      - store_artifacts:
          path: spec/cypress/screenshots
      - run:
          name: Kill test server after running Cypress
          command: kill -9 $(cat tmp/pids/server.pid)

workflows:
  version: 2
  build_pr:
    jobs:
      - rspec
      - mspec
      - lint
      - minitest

      browser_test
      lint
      minitest
      mspec_opal_chrome
      mspec_opal_nodejs
      mspec_ruby_chrome
      mspec_ruby_nodejs_with_timezone
      rspec
      smoke_test

